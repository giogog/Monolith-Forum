@page "/reset-password"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccountService AccountService

<h1>Reset Password</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="Reset" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
                </div>
                <div>
                    <button type="button" class="w-100 btn btn-lg btn-link" @onclick="GoToLogin">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private PasswordResetModelDto Input { get; set; } = new();
    private ResetPasswordDto ResetPass { get; set; } = new();
    private string Token;
    private string Email;
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            Token = Uri.UnescapeDataString(token);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            Email = Uri.UnescapeDataString(email);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("errormassage", out var errorMassage))
        {
            errorMessage = errorMassage;
        }

    }

    public async Task Reset()
    {
        ResetPass.Token = Token;
        ResetPass.Email = Email;
        ResetPass.NewPassword = Input.Password;
        var response = await AccountService.PasswordReset(ResetPass);
        
        errorMessage = response.Message;
    }
    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

}

